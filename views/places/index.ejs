<% layout('layouts/app') %>

<h1>All Places</h1>
<div id="mapContainer" style="width: 100%; height: 500px; margin-bottom: 5%"></div>
<% for(const place of places) { %>
    <div class="card mb-3">
        <div class="row">
            <div class="col-md-4">
                <% if(place.images.length){ %>
                <img src="/images/<%= place.images[0].filename %>" alt="<%= place.title %>" class="img-fluid">
                <% } else { %>
                <img src="https://source.unsplash.com/collection/2349781/1280x720" alt="<%= place.title %>" class="img-fluid">
                <% } %>
            </div>
            <div class="col-md-8">
                <div class="card-body">
                    <h5 class="card-title"><%= place.title %></h5>
                    <p class="card-text"><%= place.description %></p>
                    <p class="card-text">
                        <small class="text-secondary"><%= place.location %></small>
                    </p>
                    <a href="/places/<%= place._id %>" class="btn btn-primary">View <%= place.title %></a>
                </div>
            </div>
        </div>
    </div>
<% } %>

<script>
    const clusteredPlace = <%- clusteredPlace %>;
</script>
<script>
    function startClustering(map, data) {
        // First we need to create an array of DataPoint objects,
        // for the ClusterProvider
        const dataPoints = data.map(function (item) {
          return new H.clustering.DataPoint(item.latitude, item.longitude);
        });
      
        // Create a clustering provider with custom options for clusterizing the input
        const clusteredDataProvider = new H.clustering.Provider(dataPoints, {
          clusteringOptions: {
            // Maximum radius of the neighbourhood
            eps: 32,
            // minimum weight of points required to form a cluster
            minWeight: 2
          }
        });
      
        // Create a layer tha will consume objects from our clustering provider
        const clusteringLayer = new H.map.layer.ObjectLayer(clusteredDataProvider);
      
        // To make objects from clustering provder visible,
        // we need to add our layer to the map
        map.addLayer(clusteringLayer);
      }

     // Initialize the platform object
     const platform = new H.service.Platform({
        'apikey': `PtBwHDt0WGY1C5U1l-F_idbSjQ5iP6l-L0Do1sseUEs`
      });
  
      // Obtain the default map types from the platform object
      const defaultLayers = platform.createDefaultLayers();
  
      // Instantiate (and display) the map
      const map = new H.Map(
        document.getElementById('mapContainer'),
        defaultLayers.vector.normal.map,
        {
          zoom: 2,
          center: { lat: -0.9730197, lng: 116.7034266 },
        });
  
      const ui = H.ui.UI.createDefault(map, defaultLayers, 'en-US');
      const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

      startClustering(map, clusteredPlace);
</script>